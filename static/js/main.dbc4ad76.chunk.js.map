{"version":3,"sources":["components/Header.js","components/TodoList.js","components/Todos.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Header","today","Date","date","getFullYear","getMonth","getDate","style","background","color","padding","textAlign","borderRadius","fontSize","Component","TodoList","this","props","todo","id","title","time","complete","textDecoration","style2","checkBtn","border","checkBtn2","Button","disabled","type","variant","size","onClick","completeTodo","bind","className","deleteTodo","Todos","axios","put","then","response","data","window","location","reload","delete","setState","todos","state","filter","getTodoList","get","length","Table","striped","hover","map","key","AddTodo","submit","newData","post","textChange","event","target","name","value","selectChange","Card","marginTop","marginBottom","Form","onSubmit","Body","Group","as","Row","Label","column","sm","Col","Control","autoComplete","onChange","placeholder","required","htmlSize","Footer","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sQAEqBA,G,6KAGb,IAWIC,EAAQ,IAAIC,KAChBC,EAAOF,EAAMG,cAAgB,KAAOH,EAAMI,WAAa,GAAK,IAAMJ,EAAMK,UAExE,OACI,yBAAKC,MAfI,CACTC,WAAY,OACZC,MAAO,kBACPC,QAAU,MACVC,UAAY,SACZC,aAAe,eAWX,iDAAuB,IAAI,0BAAML,MATxB,CACbM,SAAS,OACTJ,MAAO,SAOiDN,S,GAnBhCW,c,yBCCfC,E,uKACP,IAAD,EACiCC,KAAKC,MAAMC,KAA1CC,EADF,EACEA,GAAGC,EADL,EACKA,MAAMjB,EADX,EACWA,KAAKkB,EADhB,EACgBA,KAAKC,EADrB,EACqBA,SAEpBf,EAAO,CACTgB,eAAkBD,EAAW,eAAe,OAC5Cb,MAASa,EAAW,kBAAkB,OACtCV,aAAa,aACbD,UAAW,UAETa,EAAQ,CACVf,MAASa,EAAW,OAAO,SAGzBG,EAAU,CACZjB,WAAcc,EAAW,OAAQ,QACjCI,OAAQ,QAENC,EAAW,CACbnB,WAAcc,EAAW,MAAO,OAChCI,OAAQ,QAGZ,OACI,6BACI,+BACI,wBAAInB,MAAQiB,GAAZ,SACA,wBAAIjB,MAAQA,GAAQa,GACpB,wBAAIb,MAAQiB,GAAZ,QACA,wBAAIjB,MAAQA,GAAQJ,GACpB,wBAAII,MAAQiB,GAAZ,QACA,wBAAIjB,MAAQA,GAAQc,GACpB,4BACA,kBAACO,EAAA,EAAD,CAAQrB,MAAOkB,EAAUI,SAAYP,EAAWQ,KAAK,SAAUC,QAAQ,UAAUC,KAAK,KAAKC,QAASjB,KAAKC,MAAMiB,aAAaC,KAAKnB,KAAKG,IAAK,uBAAGiB,UAAU,yBACxJ,kBAACR,EAAA,EAAD,CAAQrB,MAAOoB,EAAWE,UAAaP,EAAWQ,KAAK,SAASC,QAAQ,SAASC,KAAK,KAAKC,QAASjB,KAAKC,MAAMoB,WAAWF,KAAKnB,KAAKG,IAAM,uBAAGiB,UAAU,6B,GAlCrItB,a,QCEjBwB,E,kDACjB,WAAYrB,GAAO,IAAD,8BACd,cAAMA,IAkBViB,aAAe,SAACf,GAIRoB,IAAMC,IAAI,sCAAsCrB,EAHrC,CACXG,UAAW,IAGVmB,MAAK,SAAAC,GACkB,MAAjBA,EAASC,MACZC,OAAOC,SAASC,aA1BV,EA+BlBT,WAAa,SAAClB,GACVoB,IAAMQ,OAAO,sCAAsC5B,GAC9CsB,MAAK,SAAAC,GACkB,MAAjBA,EAASC,MACR,EAAKK,SAAS,CACVC,MAAQ,EAAKC,MAAMD,MAAME,QAAO,SAAAjC,GAAI,OAAIA,EAAKC,KAAOA,WAlCpE,EAAK+B,MAAM,CACPD,MAAM,IAHI,E,gEAOdjC,KAAKoC,gB,oCAGK,IAAD,OACLb,IAAMc,IAAI,wCACTZ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAC1BF,MAAK,SAACE,GACH,EAAKK,SAAS,CAACC,MAAON,S,+BA4BxB,IAAD,OAML,OACI,yBAAKpC,MALI,CACTE,MAAO,SAMyB,IAA5BO,KAAKkC,MAAMD,MAAMK,OACjB,wBAAIlB,UAAU,UAAd,uBACA,6BACA,wCACI,kBAACmB,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,EAAC1B,QAAQ,QAAQf,KAAKkC,MAAMD,MAAMS,KAAI,SAACxC,GAAD,OACtD,kBAAC,EAAD,CAAUyC,IAAMzC,EAAKC,GAAID,KAAQA,EAAMgB,aAAc,EAAKA,aAAcG,WAAa,EAAKA,uB,GAzD/EvB,a,gCCAd8C,E,4MAElBV,MAAQ,CACH9B,MAAO,GAAIjB,KAAK,GAAIkB,KAAM,I,EAG9BwC,OAAS,WACL,IAAI5D,EAAQ,IAAIC,KACZC,EAAOF,EAAMG,cAAgB,KAAOH,EAAMI,WAAa,GAAK,IAAMJ,EAAMK,UAEtEwD,EAAS,CACX1C,MAAO,EAAK8B,MAAM9B,MAClBjB,KAAMA,EACNkB,KAAO,EAAK6B,MAAM7B,MAGtBkB,IAAMwB,KAAK,kCAAmCD,GAC7CrB,MAAK,SAAAC,GACmB,OAAlBA,EAASC,MACR,EAAKK,SAAS,CAAC5B,MAAO,GAAIC,KAAK,S,EAQ3C2C,WAAa,SAACC,GACgB,UAAtBA,EAAMC,OAAOC,MACb,EAAKnB,SAAS,CACd5B,MAAO6C,EAAMC,OAAOE,QAGE,SAAtBH,EAAMC,OAAOC,MACb,EAAKnB,SAAS,CACd7C,KAAM8D,EAAMC,OAAOE,S,EAK3BC,aAAe,SAACJ,GACa,SAAtBA,EAAMC,OAAOC,MACZ,EAAKnB,SAAS,CACZ3B,KAAO4C,EAAMC,OAAOE,S,uDAMpB,IAAD,EACgBpD,KAAKkC,MAAnB9B,EADF,EACEA,MAAMC,EADR,EACQA,KAab,OACA,6BACI,kBAACiD,EAAA,EAAD,CAAMlC,UAAU,yCAChB,kBAACkC,EAAA,EAAKtE,OAAN,CAAaO,MAdF,CACXgE,UAAU,KACVC,aAAe,OACf/D,MAAM,SAWuB,4BAAI,uBAAG2B,UAAU,sBAAb,wBAC7B,kBAACqC,EAAA,EAAD,CAAMC,SAAU1D,KAAK6C,QACjB,kBAACS,EAAA,EAAKK,KAAN,CAAWpE,MAXV,CACTE,MAAO,oBAWK,kBAACgE,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KAChB,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,SACA,kBAACC,EAAA,EAAD,CAAKD,GAAG,MACJ,kBAACR,EAAA,EAAKU,QAAN,CAAcC,aAAa,MAAMpD,KAAK,KAAKF,KAAK,OAAOX,GAAG,QAAQgD,KAAK,QAAQC,MAAOhD,EAAOiE,SAAUrE,KAAKgD,WAAasB,YAAY,iBAAiBC,UAAQ,MAIlK,kBAACd,EAAA,EAAKG,MAAN,CAAYC,GAAIC,KAChB,kBAACL,EAAA,EAAKM,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAtB,eACI,kBAACC,EAAA,EAAD,CAAKD,GAAG,MACJ,kBAACR,EAAA,EAAKU,QAAN,CAAcN,GAAG,SAASW,SAAU,EAAGxD,KAAK,KAAKb,GAAG,OAAOgD,KAAK,OAAOC,MAAO/C,EAAMgE,SAAUrE,KAAKqD,cAC/F,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,6CAKhB,kBAACC,EAAA,EAAKmB,OAAN,CAAarD,UAAU,iCAAiC7B,MAhDjD,CACfI,UAAU,UAgDE,kBAACiB,EAAA,EAAD,CAAQE,KAAK,SAASC,QAAQ,UAAUC,KAAK,MAAK,uBAAGI,UAAU,eAAb,qB,GA7GrCtB,aCEhB4E,E,uKAEjB,OACE,yBAAKtD,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANyBtB,aCKb6E,QACW,cAA7B/C,OAAOC,SAAS+C,UAEe,UAA7BhD,OAAOC,SAAS+C,UAEhBhD,OAAOC,SAAS+C,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dbc4ad76.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Header extends Component {\n    render() {\n\n        const style ={\n            background :'grey',\n            color: 'rgb(70, 57, 31)',\n            padding : '2px',\n            textAlign : 'center',\n            borderRadius : '40px 0 0 0'\n        }\n        const spanStyle ={\n            fontSize:'14px',\n            color: 'gold'\n        }\n        let today = new Date(),\n        date = today.getFullYear() + '/' + (today.getMonth() + 1) + '/' + today.getDate();\n        \n        return (\n            <div style ={style}>\n                <h1> My-TodoList Today{' '}<span style={spanStyle}>{date}</span></h1>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport {Button} from 'react-bootstrap';\n\nexport default class TodoList extends Component {\n    render() {\n        const {id,title,date,time,complete} = this.props.todo\n\n        const style ={\n            textDecoration : (complete)? 'line-through':'none',\n            color : (complete)? 'rgb(163,132,68)':'gold',\n            borderRadius:'0 0 40px 0',\n            textAlign: 'center'\n        }\n        const style2 ={\n            color : (complete)? 'gold':'white',\n        }\n\n        const checkBtn ={\n            background : (complete)? 'grey' :'green',\n            border :'none'\n        }\n        const checkBtn2 ={\n            background : (complete)? 'red' :'grey',\n            border :'none'\n        }\n\n        return (\n            <div>\n                <tbody>\n                    <th style ={style2}>Title</th> \n                    <td style ={style}>{title}</td>\n                    <th style ={style2}>Date</th>\n                    <td style ={style}>{date}</td>\n                    <th style ={style2}>Time</th>\n                    <td style ={style}>{time}</td>\n                    <td>\n                    <Button style={checkBtn} disabled ={(complete)} type=\"submit\"  variant=\"success\" size=\"sm\" onClick={this.props.completeTodo.bind(this,id)}><i className=\"fas fa-check-square\"></i></Button>\n                    <Button style={checkBtn2} disabled ={(!complete)} type=\"submit\" variant=\"danger\" size=\"sm\" onClick={this.props.deleteTodo.bind(this,id)} ><i className=\"fas fa-trash-alt\"></i></Button>\n                    </td>\n                </tbody>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport TodoList from  './TodoList';\nimport {Table} from 'react-bootstrap';\n\nexport default class Todos extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            todos:[]\n        }\n    }\n    componentDidMount() {\n        this.getTodoList();\n    }\n\n    getTodoList(){\n            axios.get('http://localhost:2020/todos/todolist')\n            .then(response => response.data)\n            .then((data)=>{\n                this.setState({todos: data});\n            })\n        }\n    \n\n    completeTodo = (id) => {\n        const newData ={\n            complete : true\n        }\n            axios.put('http://localhost:2020/todos/update/'+id, newData)\n            .then(response => {\n                if(response.data != null) {\n                window.location.reload()\n                }\n            })\n        }\n\n    deleteTodo = (id) => {\n        axios.delete(\"http://localhost:2020/todos/delete/\"+id)\n            .then(response => {\n                if(response.data != null) {\n                    this.setState({\n                        todos : this.state.todos.filter(todo => todo.id !== id)\n                    })\n                }\n            })\n        }\n                \n    render() {\n        \n        const style ={\n            color: 'gold'\n            }\n\n        return (\n            <div style={style}>\n                {\n                this.state.todos.length === 0 ?\n                <h5 className=\"center\">No Record Available</h5> :\n                <div>\n                <h3>TodoList</h3>\n                    <Table striped hover variant=\"dark\">{this.state.todos.map((todo) => (\n                        <TodoList key= {todo.id} todo = {todo} completeTodo={this.completeTodo} deleteTodo= {this.deleteTodo}/>\n                        ))}\n                    </Table>\n                </div>\n                }\n            </div>\n                   \n            )\n        }\n    }","import React, { Component } from 'react'\nimport { Button,Card,Form,Row,Col} from 'react-bootstrap';\n\nimport axios from 'axios';\n\nexport default class AddTodo extends Component {\n\n   state = {\n        title: '', date:'', time: ''\n    }\n\n    submit = () => {\n        let today = new Date()\n        let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n\n        const newData ={\n            title :this.state.title,\n            date :date,\n            time : this.state.time,\n            }\n\n        axios.post('http://localhost:2020/todos/add', newData)\n        .then(response => {\n            if(response.data !== null){\n                this.setState({title :'', time:''});\n               \n            }\n        });\n                \n    }\n          \n\n    textChange = (event) => {\n        if (event.target.name === \"title\") {\n            this.setState({\n            title: event.target.value\n            });\n        }\n        if (event.target.name === \"date\") {\n            this.setState({\n            date: event.target.value\n            });\n        }\n    }\n\n    selectChange = (event) => {\n       if (event.target.name === 'time') {\n            this.setState({\n              time : event.target.value\n            });\n          }\n      }\n\n\n    render() {\n        const {title,time} = this.state;\n\n        const formCss ={\n            marginTop:'5%',\n            marginBottom : '35px',\n            color:'gold'\n             };\n        const style ={\n            color: 'rgb(163,132,68)'\n        }\n        const footerStyle ={\n            textAlign:'right'\n        }\n        return (\n        <div>\n            <Card className=\"border border-dark bg-dark text-white\">\n            <Card.Header style={formCss}><h5><i className=\"fas fa-plus-square\">  Add New TodoList</i></h5></Card.Header>\n                <Form onSubmit={this.submit}>\n                    <Card.Body style={style} >\n                        <Form.Group as={Row}>\n                        <Form.Label column sm=\"2\">Title</Form.Label>\n                        <Col sm=\"10\">\n                            <Form.Control autoComplete=\"off\" size=\"sm\" type=\"text\" id=\"title\" name=\"title\" value={title} onChange={this.textChange}  placeholder=\"Enter New Todo\" required/>\n                        </Col>\n                            </Form.Group>\n\n                        <Form.Group as={Row}>\n                        <Form.Label column sm=\"2\">Choose Time</Form.Label>\n                            <Col sm=\"10\">\n                                <Form.Control as=\"select\" htmlSize={3} size=\"sm\" id=\"time\" name=\"time\" value={time} onChange={this.selectChange}>\n                                    <option>01.00</option>\n                                    <option>02.00</option>\n                                    <option>03.00</option>\n                                    <option>04.00</option>\n                                    <option>05.00</option>\n                                    <option>06.00</option>\n                                    <option>07.00</option>\n                                    <option>08.00</option>\n                                    <option>09.00</option>\n                                    <option>10.00</option>\n                                    <option>11.00</option>\n                                    <option>12.00</option>\n                                    <option>13.00</option>\n                                    <option>14.00</option>\n                                    <option>15.00</option>\n                                    <option>16.00</option>\n                                    <option>17.00</option>\n                                    <option>18.00</option>\n                                    <option>19.00</option>\n                                    <option>20.00</option>\n                                    <option>21.00</option>\n                                    <option>22.00</option>\n                                    <option>23.00</option>\n                                    <option>24.00</option>\n                                </Form.Control>\n                            </Col>\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer className=\"border border-white text-black\" style={footerStyle}>\n                        <Button type=\"submit\" variant=\"warning\" size=\"sm\"><i className=\"far fa-save\">  Submit</i></Button>\n                    </Card.Footer>\n                </Form>\n            </Card>\n        </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './App.css';\nimport Header from './components/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Header/>\n        <AddTodo/>\n        <Todos/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}